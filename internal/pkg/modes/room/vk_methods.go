package room

import (
	"VK-bot/internal/config"
	"VK-bot/internal/pkg/keyboard"
	"fmt"
	"math"
	"math/rand"
	"net/http"
	"net/url"
	"time"
)

const (
	EnterRoom  = "üë•–°–æ–∑–¥–∞—Ç—å/–ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É"
	CreateRoom = "üî®–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"
	JoinRoom   = "üîç–ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É"
	Exit       = "üö™–í—ã–π—Ç–∏"
)

func SendRoomMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{CreateRoom, JoinRoom, Exit}
	keyboardJSON := keyboard.GenerateKeyboard1x3(buttonsText)

	text := "–ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å ID –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –≤—ã–±–∏—Ä–∞–π \"" + JoinRoom + "\".\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å -> –≤—ã–±–µ—Ä–∏ \"" + CreateRoom + "\".\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∫–æ–º–Ω–∞—Ç—ã!"

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendWrongMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{CreateRoom, JoinRoom, Exit}
	keyboardJSON := keyboard.GenerateKeyboard1x3(buttonsText)

	text := "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendEnterUsernameMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	text := "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ:"

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer)
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendEnterRoomCodeMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	text := "–í–≤–µ–¥–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:"

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer)
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendNoRoomFoundMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	text := "–ö–æ–º–Ω–∞—Ç—ã —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :("

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer)
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendGeneratedRoomCodeMessage(cfg *config.Config, peerID int, code string) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	text := "–ö–æ–¥ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:\n\n " + code + "\n\n –ó–∞–ø–∏—à–∏ –µ–≥–æ –∏ –ø–µ—Ä–µ–¥–∞–π –¥—Ä—É–≥–∏–º, —á—Ç–æ–± –æ–Ω–∏ –º–æ–≥–ª–∏ –∫ —Ç–µ–±–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è."

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer)
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendRoomStatusMessage(cfg *config.Config, room *Room) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{Exit}
	keyboardJSON := keyboard.GenerateKeyboard1x1(buttonsText)

	var status string

	for _, user := range room.Users {
		status += user.UserName + ": " + user.Value + "\n"
	}

	for _, user := range room.Users {
		text := "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã:\n\n" + status

		urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, user.UserID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
		_, err := http.Get(urlToSend)
		if err != nil {
			return err
		}
	}

	return nil
}
