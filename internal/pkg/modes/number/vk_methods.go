package number

import (
	"VK-bot/internal/config"
	"VK-bot/internal/pkg/keyboard"
	"fmt"
	"math"
	"math/rand"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

const (
	GetANumber  = "üî¢–ü–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ"
	SetInterval = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª"
	Confirm     = "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
)

func SendNumberMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{SetInterval, Confirm}
	keyboardJSON := keyboard.GenerateKeyboard3x1(buttonsText)

	text := `–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0-10. 

–ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –∂–º–∏ "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".`

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendPromptMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	text := "–í–≤–µ–¥–∏ –¥–≤–∞ —á–∏—Å–ª–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:"

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer)
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendIntervalMessage(cfg *config.Config, peerID, low, top int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{SetInterval, Confirm}
	keyboardJSON := keyboard.GenerateKeyboard3x1(buttonsText)

	text := "–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: " + strconv.Itoa(low) + "..." + strconv.Itoa(top)

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendNumberOutOfBoundsMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{SetInterval, Confirm}
	keyboardJSON := keyboard.GenerateKeyboard3x1(buttonsText)

	text := "–¢–≤–æ–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ª–∏–±–æ —Ç—ã –µ–≥–æ –Ω–µ –≤–≤–µ–ª, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ."

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendIsNotANumberMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{SetInterval, Confirm}
	keyboardJSON := keyboard.GenerateKeyboard3x1(buttonsText)

	text := "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ :/"

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendWrongMessage(cfg *config.Config, peerID int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	buttonsText := []string{SetInterval, Confirm}
	keyboardJSON := keyboard.GenerateKeyboard3x1(buttonsText)

	text := "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏–∏ –∏–∑ –Ω–∏–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s&keyboard=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer, url.QueryEscape(string(keyboardJSON)))
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}

func SendResultMessage(cfg *config.Config, peerID int, number int) error {
	rand.Seed(time.Now().UnixNano())
	max := int32(math.MaxInt32)
	randomInt := rand.Int31n(max)

	text := "–¢–≤–æ–µ —á–∏—Å–ª–æ: " + strconv.Itoa(number) + "!"

	urlToSend := fmt.Sprintf("%smessages.send?peer_id=%d&message=%s&group_id=%s&random_id=%d&access_token=%s&v=%s", cfg.ApiURL, peerID, url.QueryEscape(text), cfg.GroupID, randomInt, cfg.Token, cfg.ApiVer)
	_, err := http.Get(urlToSend)
	if err != nil {
		return err
	}
	return nil
}
